// SPDX-FileCopyrightText : Â© 2024 TU Wien <vadl@tuwien.ac.at>
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// RISC-V 32 / 64 I common instruction set

instruction set architecture RV3264I = {

  model ArchSize() : Id = {Arch32}        // invoke vadl -m "ArchSize=Arch64" for 64 bit arch

  // if $ArchSize() equals Arch64 expands to second arg else to first arg
  model Arch3264 (arch32 : IsaDefs, arch64 : IsaDefs) : IsaDefs = {
    match : IsaDefs ($ArchSize() = Arch64 => $arch64; _  => $arch32)
    }

  constant Arch32 = 32                    // 32 bit architecture
  constant Arch64 = 64                    // 64 bit architecture

  constant MLen   = $ArchSize()           // MLen = 32 or 64 depending on ArchSize
  constant SftLen = (MLen / 32) + 4       // number of bits needed for shift amount (5 or 6)
  constant WLen   = 32                    // 32 bit word length in 64 bit mode

  using Byte     = Bits< 8>               // 8 bit Byte
  using Half     = Bits<16>               // 16 bit half word type
  using Word     = Bits<32>               // 32 bit word type
  using Dble     = Bits<64>               // 64 bit word type
  using Inst     = Bits<32>               // instruction word is 32 bit
  using SIntW    = SInt<32>               // signed integer word type
  using UIntW    = UInt<32>               // unsigned integer word type
  using Regs     = Bits<MLen>             // untyped register word type
  using SIntR    = SInt<MLen>             // signed integer register word type
  using UIntR    = UInt<MLen>             // unsigned integer register word type
  using Address  = Regs                   // address is register word type
  using Bits3    = Bits< 3>               // 3 bit type
  using Bits5    = Bits< 5>               // 5 bit type
  using Bits6    = Bits< 6>               // 6 bit type
  using Bits7    = Bits< 7>               // 7 bit type
  using Index    = Bits< 5>               // 5 bit register index type for 32 registers
  using UInt5    = UInt< 5>               // 5 bit unsigned shift ammount
  using UShft    = UInt<SftLen>           // 5 or 6 bit unsigned shift ammount

  [X(0) = 0]                              // register with index 0 always is 0
  register file    X : Index   -> Regs    // integer register file with 32 registers of 32 bits
  program counter PC : Address            // PC points to the start of the current instruction
  memory         MEM : Address -> Byte    // byte addressed memory

  format Rtype : Inst =                   // Rtype register 3 operand instruction format
    { funct7 : Bits7                      // [31..25] 7 bit function code
    , rs2    : Index                      // [24..20] 2nd source register index / shamt
    , rs1    : Index                      // [19..15] 1st source register index
    , funct3 : Bits3                      // [14..12] 3 bit function code
    , rd     : Index                      // [11..7]  destination register index
    , opcode : Bits7                      // [6..0]   7 bit operation code
    , shamt  = rs2 as UInt                // 5 bit unsigned shift ammount
    }

  model FtypeModel (funct67 : Id, shift : Id) : IsaDefs = {
    format Ftype : Inst =                 // Ftype shift immediate instruction format
      { fun67  : $funct67                 // [31..26/25] 6 or 7 bit function code
      , sft    : $shift                   // [24/25..20] 5 or 6 bit shift ammount
      , rs1    : Index                    // [19..15] 1st source register index
      , funct3 : Bits3                    // [14..12] 3 bit function code
      , rd     : Index                    // [11..7]  destination register index
      , opcode : Bits7                    // [6..0]   7 bit operation code
      , shamt  = sft as UInt              // 5/6 bit unsigned shift ammount
      }
    }

  format Itype : Inst =                   // Itype immediate instruction format
    { imm    : Bits<12>                   // [31..20] 12 bit immediate value
    , rs1    : Index                      // [19..15] source register index
    , funct3 : Bits3                      // [14..12] 3 bit function code
    , rd     : Index                      // [11..7]  destination register index
    , opcode : Bits7                      // [6..0]   7 bit operation code
    , immS   = imm as SIntR               // sign extended immediate value
    }

  format Utype : Inst =                   // Utype upper immediate instruction format
    { imm    : Bits<20>                   // [31..12] 20 bit immediate value
    , rd     : Index                      // [11..7]  destination register index
    , opcode : Bits7                      // [6..0]   7 bit operation code
    , immU   = (imm as UIntR) << 12       // shifted unsigned immediate value
    }

  format Stype : Inst =                   // Stype store instruction format
    { imm    [31..25, 11..7]              // 12 bit immediate value
    , rs2    [24..20]                     // 2nd source register index
    , rs1    [19..15]                     // 1st source register index
    , funct3 [14..12]                     // 3 bit function code
    , opcode [6..0]                       // 7 bit operation code
    , immS   = imm as SIntR               // sign extended immediate value
    }

  format Btype : Inst =                   // Btype branch instruction format
    { imm    [31, 7, 30..25, 11..8]       // 12 bit immediate value
    , rs2    [24..20]                     // 2nd source register index
    , rs1    [19..15]                     // 1st source register index
    , funct3 [14..12]                     // 3 bit function code
    , opcode [6..0]                       // 7 bit operation code
    , immS   = (imm as SIntR) << 1        // sign extended and shifted immediate value immS
    }

  format Jtype : Inst =                   // Jtype jump and link instruction format
    { imm    [31, 19..12, 20, 30..21]     // 20 bit immediate value
    , rd     [11..7]                      // destination register index
    , opcode [6..0]                       // 7 bit operation code
    , immS   = (imm as SIntR) << 1        // sign extended and shifted immediate value immS
    }

  model RtypeInstr (name : Id, op : BinOp, funct3 : Bin, funct7 : Bin, lhsTy : Id, rhsTy : Id) : IsaDefs = {
    instruction $name : Rtype =                        // 3 register operand instructions
      X(rd) := ((X(rs1) as $lhsTy) $op (X(rs2) as $rhsTy)) as Regs
    encoding $name = { opcode = 0b011'0011, funct3 = $funct3, funct7 = $funct7}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs2))
    }

  model WtypeInstr (name : Id, op : BinOp, funct3 : Bin, funct7 : Bin, lhsTy : Id, rhsTy : Id) : IsaDefs = {
    instruction $name : Rtype =                        // 3 register operand instructions word
      X(rd) := ((X(rs1) as $lhsTy) $op (X(rs2) as $rhsTy)) as SIntR
    encoding $name = { opcode = 0b011'1011, funct3 = $funct3, funct7 = $funct7}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs2))
    }

  model IShftInstr (name : Id, op : BinOp, funct3 : Bin, funct67 : Bin, lhsTy : Id) : IsaDefs = {
    instruction $name : Ftype =                        // shift immediate instructions
      X(rd) := ((X(rs1) as $lhsTy) $op shamt) as Regs
    encoding $name = {opcode = 0b001'0011, funct3 = $funct3, fun67 = $funct67}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", decimal(sft))
    }

  model WShftInstr (name : Id, op : BinOp, funct3 : Bin, funct7 : Bin, lhsTy : Id) : IsaDefs = {
    instruction $name : Rtype =                        // shift immediate instructions word
      X(rd) := ((X(rs1) as $lhsTy) $op shamt) as SIntR
    encoding $name = {opcode = 0b001'1011, funct3 = $funct3, funct7 = $funct7}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", decimal(shamt))
    }

  model ItypeInstr (name : Id, op : BinOp, funct3 : Bin, exTy : Id) : IsaDefs = {
    instruction $name : Itype =                        // immediate instructions
      X(rd) := ((X(rs1) as $exTy) $op (immS as $exTy)) as Regs
    encoding $name = {opcode = 0b001'0011, funct3 = $funct3}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", decimal(imm))
    }

  model WItypInstr (name : Id, op : BinOp, funct3 : Bin, exTy : Id) : IsaDefs = {
    instruction $name : Itype =                        // immediate instructions word
      X(rd) := ((X(rs1) as $exTy) $op (immS as $exTy)) as SIntR
    encoding $name = {opcode = 0b001'1011, funct3 = $funct3}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", decimal(imm))
    }

  model UtypeInstr (name : Id, opcode : Bin, rhsEx : Ex) : IsaDefs = {
    instruction $name : Utype =                        // upper immediate instructions
      X(rd) := $rhsEx
    encoding $name = {opcode = $opcode}
    assembly $name = (mnemonic, " ", register(rd), ",", hex(imm))
    }

  model LtypeInstr (name : Id, funct3 : Bin, memEx : CallEx, exTy: Id) : IsaDefs = {
    instruction $name : Itype =                        // load instructions
      let addr = X(rs1) + immS in
        X(rd) := $memEx as $exTy
    encoding $name = {opcode = 0b000'0011, funct3 = $funct3}
    assembly $name = (mnemonic, " ", register(rd), ",", decimal(imm), "(", register(rs1), ")")
    }

  model StypeInstr (name : Id, funct3 : Bin, memEx : CallEx, exTy: Id) : IsaDefs = {
    instruction $name : Stype =                        // store instructions
      let addr = X(rs1) + immS in
        $memEx := X(rs2) as $exTy
    encoding $name = {opcode = 0b010'0011, funct3 = $funct3}
    assembly $name = (mnemonic, " ", register(rs2), ",", decimal(imm), "(", register(rs1), ")")
    }

  model BtypeInstr (name : Id, relOp : BinOp, funct3 : Bin, lhsTy : Id) : IsaDefs = {
    instruction $name : Btype =                        // conditional branch instructions
      if (X(rs1) as $lhsTy) $relOp X(rs2) then
        PC := PC + immS
    encoding $name = {opcode = 0b110'0011, funct3 = $funct3}
    assembly $name = (mnemonic, " ", register(rs1), ",", register(rs2), ",", decimal(imm))
    }

  model JLinkInstr (name : Id, iFormat : Id, reg : Ex, opcode : Encs, asm : Ex) : IsaDefs = {
    instruction $name : $iFormat =                     // jump and link (register)
      let retaddr = PC.next in {
        PC    := (($reg + immS) as UInt) & 0xffff'fffe // $reg could be equal to X(rd)
        X(rd) := retaddr                               // when rs1 is equal to rd
        }
    encoding $name = {$opcode}
    assembly $name = (mnemonic, " ", register(rd), ",", decimal(imm), $asm)
    }

  model ECallInstr (name : Id, imm : Lit) : IsaDefs = {
    instruction $name : Itype =  {}                    // ecall / ebreak instructions
    encoding $name = {opcode = 0b111'0011, funct3 = 0b000, rd = 0b0'0000, rd = 0b0'0000, imm = $imm}
    assembly $name = (mnemonic)
    }

  $RtypeInstr (ADD  ; +  ; 0b000 ; 0b000'0000 ; Bits ; Bits ) // add
  $RtypeInstr (SUB  ; -  ; 0b000 ; 0b010'0000 ; Bits ; Bits ) // subtract
  $RtypeInstr (AND  ; &  ; 0b111 ; 0b000'0000 ; Bits ; Bits ) // and
  $RtypeInstr (OR   ; |  ; 0b110 ; 0b000'0000 ; Bits ; Bits ) // or
  $RtypeInstr (XOR  ; ^  ; 0b100 ; 0b000'0000 ; Bits ; Bits ) // exclusive or
  $RtypeInstr (SLT  ; <  ; 0b010 ; 0b000'0000 ; SInt ; SInt ) // set less than
  $RtypeInstr (SLTU ; <  ; 0b011 ; 0b000'0000 ; UInt ; UInt ) // set less than unsigned
  $RtypeInstr (SLL  ; << ; 0b001 ; 0b000'0000 ; UInt ; UShft) // shift left  logical
  $RtypeInstr (SRL  ; >> ; 0b101 ; 0b000'0000 ; UInt ; UShft) // shift right logical
  $RtypeInstr (SRA  ; >> ; 0b101 ; 0b010'0000 ; SInt ; UShft) // shift right arithmetic

  $ItypeInstr (ADDI ; +  ; 0b000 ; SInt)               // add immediate
  $ItypeInstr (ANDI ; &  ; 0b111 ; SInt)               // and immediate
  $ItypeInstr (ORI  ; |  ; 0b110 ; SInt)               // or immediate
  $ItypeInstr (XORI ; ^  ; 0b100 ; SInt)               // exclusive or immediate
  $ItypeInstr (SLTI ; <  ; 0b010 ; SInt)               // set less than immediate
  $ItypeInstr (SLTIU; <  ; 0b011 ; UInt)               // set less than immediate unsigned

  $UtypeInstr (AUIPC; 0b001'0111 ; PC + immU)          // add upper immediate to PC
  $UtypeInstr (LUI  ; 0b011'0111 ;      immU)          // load upper immediate

  $LtypeInstr (LB   ; 0b000 ; MEM   (addr) ; SIntR)    // load byte signed
  $LtypeInstr (LBU  ; 0b100 ; MEM   (addr) ; UIntR)    // load byte unsigned
  $LtypeInstr (LH   ; 0b001 ; MEM<2>(addr) ; SIntR)    // load half word signed
  $LtypeInstr (LHU  ; 0b101 ; MEM<2>(addr) ; UIntR)    // load half word unsigned
  $LtypeInstr (LW   ; 0b010 ; MEM<4>(addr) ; SIntR)    // load word
  $StypeInstr (SB   ; 0b000 ; MEM   (addr) ; Byte )    // store byte
  $StypeInstr (SH   ; 0b001 ; MEM<2>(addr) ; Half )    // store half word
  $StypeInstr (SW   ; 0b010 ; MEM<4>(addr) ; Word )    // store word

  $BtypeInstr (BEQ  ; =  ; 0b000 ; Bits)               // branch equal
  $BtypeInstr (BNE  ; != ; 0b001 ; Bits)               // branch not equal
  $BtypeInstr (BGE  ; >= ; 0b101 ; SInt)               // branch greater or equal
  $BtypeInstr (BGEU ; >= ; 0b111 ; UInt)               // branch greater or equal unsigned
  $BtypeInstr (BLT  ; <  ; 0b100 ; SInt)               // branch less than
  $BtypeInstr (BLTU ; <  ; 0b110 ; UInt)               // branch less than unsigned

  $JLinkInstr (JAL  ; Jtype ; PC     ; opcode = 0b110'1111 ; "") // jump and link
  $JLinkInstr (JALR ; Itype ; X(rs1) ; opcode = 0b110'0111,      // jump and link register
                                       funct3 = 0b000 ; ("(", register(rs1), ")"))

  $ECallInstr (ECALL ; 0)                              // environment (sys) call
  $ECallInstr (EBREAK; 1)                              // environment (sys) break

$Arch3264 ( // ((((((((((((((((((((((((((((((((((((((((

  $FtypeModel (Bits7 ; Bits5)                          // 32 bit F format

;           // ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  $FtypeModel (Bits6 ; Bits6)                          // 64 bit F format

  $LtypeInstr (LWU  ; 0b110 ; MEM<4>(addr) ; UIntR)    // load word unsigned
  $LtypeInstr (LD   ; 0b011 ; MEM<8>(addr) ; Dble )    // load double word
  $StypeInstr (SD   ; 0b011 ; MEM<8>(addr) ; Dble )    // store double word

  $WItypInstr (ADDIW; +  ; 0b000 ; SIntW)              // add immediate word

  $WShftInstr (SLLIW; << ; 0b001 ; 0b000'0000 ; UIntW) // shift left  logical immediate word
  $WShftInstr (SRLIW; >> ; 0b101 ; 0b000'0000 ; UIntW) // shift right logical immediate word
  $WShftInstr (SRAIW; >> ; 0b101 ; 0b010'0000 ; SIntW) // shift right arithmetic immediate word

  $WtypeInstr (ADDW ; +  ; 0b000 ; 0b000'0000 ; Word ; Word ) // add word
  $WtypeInstr (SUBW ; -  ; 0b000 ; 0b010'0000 ; Word ; Word ) // subtract word
  $WtypeInstr (SLLW ; << ; 0b001 ; 0b000'0000 ; UIntW; UInt5) // shift left  logical word
  $WtypeInstr (SRLW ; >> ; 0b101 ; 0b000'0000 ; UIntW; UInt5) // shift right logical word
  $WtypeInstr (SRAW ; >> ; 0b101 ; 0b010'0000 ; SIntW; UInt5) // shift right arithmetic word

)           // ))))))))))))))))))))))))))))))))))))))))

  $IShftInstr (SLLI ; << ; 0b001 ; 0b000'0000 ; UInt)  // shift left  logical immediate
  $IShftInstr (SRLI ; >> ; 0b101 ; 0b000'0000 ; UInt)  // shift right logical immediate
  $IShftInstr (SRAI ; >> ; 0b101 ; 0b010'0000 ; SInt)  // shift right arithmetic immediate

  }


instruction set architecture RV3264IM extending RV3264I = {

  constant MLen2   = MLen  * 2
  constant MLen2_1 = MLen2 - 1

  constant TopBitSet = ((1 as Regs) << (MLen - 1)) as Regs
  constant AllOnes = (- (1 as SIntR)) as Regs

  function isOverflow (dividend : Regs, divisor : Regs) -> Bool =
    (dividend = TopBitSet) & (divisor = AllOnes)

  model MtypeInstr (name : Id, funct3 : Bin, lhsTy : Id, rhsTy : Id, resEx : Ex) : IsaDefs = {
    instruction $name : Rtype =                        // multiply instructions
      let result = (X(rs1) as $lhsTy) * (X(rs2) as $rhsTy) in
        X(rd) := $resEx
    encoding $name = { opcode = 0b011'0011, funct3 = $funct3, funct7 = 0b000'0001}
    assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs2))
    }

// +-------------------------+-----------+---------+-----------|---------+----------+----------+
// |  Condition              |  Dividend | Divisor |    DIV    |   DIVU  |    REM   |   REMU   |
// +-------------------------+-----------+---------+-----------|---------+----------+----------+
// | Division by zero        |     *     |     0   |  AllOnes  | AllOnes | dividend | dividend |
// | Overflow (signed only)  | TopBitSet |    -1   | TopBitSet |    -    |     0    |     -    |
// +-------------------------+-----------+---------+-----------|---------+----------+----------+

  model DivModInstr (name : Id, opName : Id, funct3 : Bin, opCode : Bin, opTy : Id, sign : Id) : IsaDefs = {
    instruction $name : Rtype =                        // division and remainder instructions
      let dividend = X(rs1) as $opTy in let divisor = X(rs2) as $opTy in
        X(rd) :=  if divisor = (0 as $opTy)
                    then match : Ex ($opName = div => AllOnes; _  => dividend)
                  else match : Ex ($sign = SInt =>
                    if isOverflow (dividend, divisor)
                      then match : Ex ($opName = div => TopBitSet; _  => 0)
                      else VADL::$opName(dividend, divisor) as SIntR
                    ; _  =>
                           VADL::$opName(dividend, divisor) as SIntR
                    )
      encoding $name = { opcode = $opCode, funct3 = $funct3, funct7 = 0b000'0001}
      assembly $name = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs2))
    }

  $MtypeInstr (MUL    ; 0b000 ; SInt ; SInt ; result as Regs       ) // multiply signed
  $MtypeInstr (MULH   ; 0b001 ; SInt ; SInt ; result(MLen2_1..MLen)) // multiply high signed * signed
  $MtypeInstr (MULHSU ; 0b010 ; SInt ; UInt ; result(MLen2_1..MLen)) // multiply high signed * unsigned
  $MtypeInstr (MULHU  ; 0b011 ; UInt ; UInt ; result(MLen2_1..MLen)) // multiply high unsigned * unsigned

  $DivModInstr(DIV   ; div ; 0b100 ; 0b011'0011 ; SIntR ; SInt)      // signed division
  $DivModInstr(DIVU  ; div ; 0b101 ; 0b011'0011 ; UIntR ; UInt)      // unsigned division
  $DivModInstr(REM   ; mod ; 0b110 ; 0b011'0011 ; SIntR ; SInt)      // signed remainder

$Arch3264 ( // ((((((((((((((((((((((((((((((((((((((((

  $DivModInstr(REMU  ; mod ; 0b111 ; 0b011'0011 ; UIntR ; UInt)      // unsigned remainder

;           // ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  $DivModInstr(REMU  ; mod ; 0b111 ; 0b011'0011 ; UIntR ; UInt)      // unsigned remainder

  $WtypeInstr (MULW  ;  *  ; 0b000 ; 0b000'0001 ; SIntW ; SIntW)     // multiply signed word

  $DivModInstr(DIVW  ; div ; 0b100 ; 0b011'1011 ; SIntW ; SInt)      // signed division word
  $DivModInstr(DIVUW ; div ; 0b101 ; 0b011'1011 ; UIntW ; UInt)      // unsigned division word
  $DivModInstr(REMW  ; mod ; 0b110 ; 0b011'1011 ; SIntW ; SInt)      // signed remainder word
  $DivModInstr(REMUW ; mod ; 0b111 ; 0b011'1011 ; UIntW ; UInt)      // unsigned remainder word

)           // ))))))))))))))))))))))))))))))))))))))))

  }

  application binary interface ABI for RV3264IM = {}

  micro processor CPU implements RV3264IM with ABI = {}
